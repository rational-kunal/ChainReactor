{"version":3,"sources":["components/GameNode.js","core/ChainReactor.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["GameNode","value","player","coordinate","onTap","this","props","state","animationState","NodeAnimationState","nextAnimationState","delay","className","Node","transform","backgroundColor","animation","useSpring","to","from","config","wobbly","div","style","onClick","PlayerPoolController","playerSize","wonFn","currentPlayer","wait","defeatedPool","Array","fill","playerNRegion","moves","stillInGame","forEach","n","i","ChainReactor","gridSize","grid","playerController","row","push","col","column","console","log","x","y","filter","fn","reaction","change","explodeTo","canExplode","explosionIn","canAddAt","addTo","reactionChain","newAddTo","newChain","valueChangeAt","explosions","index","isComplete","reactionAt","ux","uy","vx","vy","length","moveComplete","Board","nodeGrid","won","gameController","rowCount","columnCount","playerCount","setState","nodeTapped","bind","didMove","valueChanged","setTimeout","forceUpdate","width","display","flexWrap","flat","map","node","render","React","Component","App","classList","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b7353253.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useSpring, animated, config } from 'react-spring';\nimport './Game.css';\n\nexport default class GameNode {\n    constructor({ value, player, coordinate, onTap }) {\n        this.props = {\n            value: value,\n            player: player,\n            coordinate: coordinate,\n            onTap: onTap,\n        };\n\n        this.state = {\n            animationState: NodeAnimationState(0, null),\n            nextAnimationState: NodeAnimationState(0, null),\n        };\n    }\n\n    valueChanged({ value, player, delay }) {\n        this.state = {\n            animationState: this.state.nextAnimationState,\n            nextAnimationState: NodeAnimationState(value, player),\n            delay: delay,\n        };\n\n        this.props.value = value;\n    }\n\n    render() {\n        return (\n            <div className=\"game-node\">\n                <Node\n                    coordinate={this.props.coordinate}\n                    value={this.props.value}\n                    onTap={this.props.onTap}\n                    animationState={this.state.animationState}\n                    nextAnimationState={this.state.nextAnimationState}\n                    delay={this.state.delay}\n                />\n            </div>\n        );\n    }\n}\n\nfunction NodeAnimationState(value, player) {\n    const playerColor = ['#3282b8', '#c02739'];\n    const scale = 1 + value / 4;\n\n    return {\n        transform: 'scale(' + scale + ')',\n        backgroundColor: player == null ? '#30475e' : playerColor[player],\n    };\n}\n\nfunction Node({\n    coordinate,\n    onTap,\n    value,\n    animationState,\n    nextAnimationState,\n    delay,\n}) {\n    const animation = useSpring({\n        to: nextAnimationState,\n        from: animationState,\n        delay,\n        config: config.wobbly,\n    });\n    return (\n        <animated.div\n            style={animation}\n            className=\"inner-node\"\n            onClick={() => onTap(coordinate)}\n        >\n            {value}\n        </animated.div>\n    );\n}\n","class PlayerPoolController {\n    constructor(playerSize, wonFn) {\n        this.playerSize = playerSize;\n        this.currentPlayer = 0;\n\n        this.wonFn = wonFn;\n\n        this.wait = false;\n\n        this.defeatedPool = Array(this.playerSize).fill(false);\n        this.playerNRegion = Array(this.playerSize).fill(0);\n\n        this.moves = 0;\n    }\n\n    moveComplete() {\n        this.moves++;\n\n        this.currentPlayer++;\n        this.currentPlayer %= this.playerSize;\n        while (this.defeatedPool[this.currentPlayer]) {\n            this.currentPlayer++;\n            this.currentPlayer %= this.playerSize;\n        }\n    }\n\n    isComplete() {\n        let stillInGame = 0;\n        if (this.moves > this.playerSize && !this.wait) {\n            this.playerNRegion.forEach((n, i) => n > 0 || stillInGame++);\n\n            if (stillInGame === 1) {\n                this.playerNRegion.forEach((n, i) => n > 0 || this.wonFn(i));\n                return true;\n            }\n\n            return false;\n        }\n\n        return false;\n    }\n}\n\nexport default class ChainReactor {\n    grid = [];\n\n    constructor(gridSize, playerSize, wonFn) {\n        this.gridSize = gridSize;\n\n        this.playerController = new PlayerPoolController(playerSize, wonFn);\n\n        for (let row = 0; row < this.gridSize.row; row++) {\n            this.grid.push([]);\n            for (let col = 0; col < this.gridSize.column; col++) {\n                this.grid[row].push({\n                    value: 0,\n                    player: null,\n                });\n            }\n        }\n    }\n\n    printGrid() {\n        for (let row = 0; row < this.gridSize.row; row++) {\n            console.log(this.grid[row]);\n        }\n    }\n\n    canAddAt(x, y) {\n        return (\n            this.grid[x][y].player == null ||\n            this.grid[x][y].player === this.playerController.currentPlayer\n        );\n    }\n\n    canExplode(x, y) {\n        const value = this.grid[x][y].value;\n        if (\n            (x === 0 && y === 0) ||\n            (x === 0 && y === this.gridSize.column - 1) ||\n            (x === this.gridSize.row - 1 && y === 0) ||\n            (x === this.gridSize.row - 1 && y === this.gridSize.column - 1)\n        ) {\n            return value === 1;\n        }\n\n        if (\n            x === 0 ||\n            x === this.gridSize.row - 1 ||\n            y === 0 ||\n            y === this.gridSize.column - 1\n        ) {\n            return value === 2;\n        }\n\n        return value === 3;\n    }\n\n    explosionIn(x, y) {\n        let explode_at = [\n            { x: x - 1, y: y },\n            { x: x + 1, y: y },\n            { x: x, y: y - 1 },\n            { x: x, y: y + 1 },\n        ];\n        return explode_at.filter(({ x, y }) => {\n            return (\n                x >= 0 &&\n                x < this.gridSize.row &&\n                y >= 0 &&\n                y < this.gridSize.column\n            );\n        });\n    }\n\n    reactionAt(x, y, fn) {\n        let reaction = {\n            change: {\n                value: 0,\n                player: null,\n            },\n            explodeTo: [],\n        };\n\n        if (this.canExplode(x, y)) {\n            reaction.explodeTo = this.explosionIn(x, y);\n            this.grid[x][y].value = 0;\n            this.playerController.playerNRegion[this.grid[x][y].player]--;\n            this.playerController.wait = true;\n            this.grid[x][y].player = null;\n        } else {\n            this.grid[x][y].value++;\n\n            this.playerController.playerNRegion[this.grid[x][y].player]--;\n            this.playerController.wait = false;\n            this.grid[x][y].player = this.playerController.currentPlayer;\n            reaction.change.player = this.playerController.currentPlayer;\n            this.playerController.playerNRegion[this.grid[x][y].player]++;\n        }\n\n        reaction.change.value = this.grid[x][y].value;\n\n        fn(reaction);\n    }\n\n    didMove(x, y) {\n        if (!this.canAddAt(x, y)) {\n            return null;\n        }\n\n        let addTo = [{ x: x, y: y }];\n        let reactionChain = [];\n\n        while (addTo.length !== 0 && !this.playerController.isComplete()) {\n            let newAddTo = [];\n            let newChain = {\n                valueChangeAt: [],\n                explosions: [],\n            };\n\n            addTo.forEach(({ x, y }, index) => {\n                if (this.playerController.isComplete()) return;\n                this.reactionAt(x, y, ({ change, explodeTo }) => {\n                    newChain.valueChangeAt.push({\n                        x: x,\n                        y: y,\n                        value: change.value,\n                        player: change.player,\n                    });\n\n                    explodeTo.forEach((coordinate) => {\n                        newChain.explosions.push({\n                            ux: x,\n                            uy: y,\n                            vx: coordinate.x,\n                            vy: coordinate.y,\n                        });\n\n                        newAddTo.push(coordinate);\n                    });\n                });\n            });\n\n            reactionChain.push(newChain);\n            addTo = newAddTo;\n        }\n\n        this.playerController.moveComplete();\n\n        return reactionChain;\n    }\n}\n","import React from 'react';\nimport GameNode from './GameNode';\nimport './Game.css';\n\nimport ChainReactor from '../core/ChainReactor';\n\nexport default class Board extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.nodeGrid = [];\n        this.wait = false;\n        this.gridSize = props.gridSize;\n        this.state = {\n            won: false,\n        };\n\n        this.gameController = new ChainReactor(\n            { row: this.gridSize.rowCount, column: this.gridSize.columnCount },\n            props.playerCount,\n            (player) => {\n                this.setState({\n                    won: player + 1,\n                });\n            }\n        );\n\n        this.nodeTapped = this.nodeTapped.bind(this);\n    }\n\n    nodeTapped({ row, column }) {\n        if (this.wait) {\n            return;\n        }\n\n        const reactionChain = this.gameController.didMove(row, column);\n\n        if (reactionChain == null) {\n            return;\n        }\n\n        let delay = 0;\n        let delayDelta = 300;\n        reactionChain.forEach((reaction) => {\n            reaction.valueChangeAt.forEach(({ x, y, value, player }) => {\n                this.nodeGrid[x][y].valueChanged({ value, player, delay });\n            });\n            delay += delayDelta;\n        });\n\n        this.wait = true;\n        setTimeout(() => {\n            this.wait = false;\n            this.forceUpdate();\n        }, delay - delayDelta);\n\n        this.forceUpdate();\n    }\n\n    componentDidMount() {\n        for (let row = 0; row < this.gridSize.rowCount; row++) {\n            this.nodeGrid.push([]);\n            for (let column = 0; column < this.gridSize.columnCount; column++) {\n                this.nodeGrid[row].push(\n                    new GameNode({\n                        value: 0,\n                        player: null,\n                        coordinate: { row: row, column: column },\n                        onTap: this.nodeTapped,\n                    })\n                );\n            }\n        }\n\n        this.forceUpdate();\n    }\n\n    render() {\n        return (\n            <div\n                style={{\n                    width: this.gridSize.columnCount * 10 + 'vmin',\n                    display: 'flex',\n                    flexWrap: 'wrap',\n                }}\n                className=\"board\"\n            >\n                <div\n                    style={{ width: this.gridSize.columnCount * 10 + 'vmin' }}\n                    className=\"helper\"\n                >\n                    {this.state.won\n                        ? this.state.won + ' has won'\n                        : (!this.wait || 'wait for animation, ') +\n                          this.gameController.playerController.currentPlayer +\n                          \"'s turn\"}\n                </div>\n                {this.nodeGrid.flat(2).map((node) => node.render())}\n            </div>\n        );\n    }\n}\n","import React from 'react'\nimport './App.css'\n\nimport Board from './components/Board'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Board\n                classList=\"center\"\n                gridSize={{ rowCount: 6, columnCount: 4 }}\n                playerCount={2}\n            />\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}